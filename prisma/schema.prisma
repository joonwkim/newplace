// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ThumbsStatus {
  ThumbUp
  ThumbDown
  None
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String?
  image    String?

  roles Role[]

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vote      Vote[]
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  projectIds String[]  @db.ObjectId
  projects   Project[] @relation(fields: [projectIds], references: [id])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  projects Project[]
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String

  viewCount       Int     @default(0)
  thumbsUpCount   Int     @default(0)
  thumbsDownCount Int     @default(0)
  isPublic        Boolean @default(true)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  isGroupType Boolean @default(false)

  tagIds String[] @db.ObjectId
  tags   Tag[]    @relation(fields: [tagIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vote      Vote[]
}

model Vote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  thumbsStatus ThumbsStatus
  forked       Boolean      @default(false)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @db.ObjectId

  voter   User   @relation(fields: [voterId], references: [id])
  voterId String @db.ObjectId
}
